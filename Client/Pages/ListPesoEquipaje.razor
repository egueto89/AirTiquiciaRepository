@page "/pesoEquipaje"
@using AirTiquiciaAPP.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime


    <AuthorizeView>
        <Authorized>
            <h3>Peso Equipaje</h3>
            <p>Lista de peso equipaje</p>


            @if (listPesoEquipaje == null)
            {
                <p><em>Loading...</em></p>
            }
            else if (!listPesoEquipaje.Any())
            {
                <p><em>No existen Registros</em></p>
            }
            else
            {
                <button class="btn btn-primary" id="btn-crear" @onclick="(() => ObtenerPesoEquipaje (0))">
                    <span class="icon fa-solid fa-plus-square"></span>Crear Peso Equipaje
                </button>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Peso</th>
                            <th>Precio</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pesoEquipaje in listPesoEquipaje)
                        {
                            <tr>
                                <td>@pesoEquipaje.Peso</td>
                                <td>@pesoEquipaje.Precio</td>
                                <td>
                                    <button class="btn btn-outline-secondary" @onclick="(() => ObtenerPesoEquipaje (pesoEquipaje.IdPesoEquipaje ))">
                                        <span class="icon fa-solid fa-pencil" title="pencil" aria-hidden="true"></span>
                                        Editar
                                    </button>
                                    <button class="btn btn-outline-danger" role="button" @onclick="(() => Delete_Click(pesoEquipaje))">
                                        <span class="icon fa-solid fa-trash" title="trash" aria-hidden="true"></span>
                                        Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </Authorized>
        <NotAuthorized>
            <div class="alert alert-warning col-12" role="alert">
                No Autorizado por favor inicie sesión
            </div>
        </NotAuthorized>
    </AuthorizeView>

    
    @code {

        private List<PesoEquipaje> listPesoEquipaje = new List<PesoEquipaje>();

        protected override async Task OnInitializedAsync()
        {
            await LlenarTabla();

        }

        private async Task LlenarTabla()
        {
            try
            {
                listPesoEquipaje = await Http.GetFromJsonAsync<List<PesoEquipaje>>("PesoEquipaje");
            }
            catch (Exception ex)
            {
                listPesoEquipaje = new List<PesoEquipaje>();

            }
        }


        private void ObtenerPesoEquipaje(int idPesoEquipaje)
        {
            if (idPesoEquipaje == 0)
            {
                navigationManager.NavigateTo($"editPesoEquipaje/");
            }
            else
            {
                navigationManager.NavigateTo($"editPesoEquipaje/{idPesoEquipaje }");
            }


        }

        protected async void Delete_Click(PesoEquipaje pesoEquipaje)
        {
            try
            {
                if (!await JSRuntime.InvokeAsync<bool>("confirm", $"¿Esta seguro que desea eliminar el peso del equipaje?"))
                    return;

                var respon = await Http.DeleteAsync($"PesoEquipaje/{pesoEquipaje.IdPesoEquipaje}");

                if (respon.IsSuccessStatusCode)
                {
                    await LlenarTabla();
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {

                throw;
            }


        }

    }
