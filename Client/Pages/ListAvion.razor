@page "/aviones"
@using AirTiquiciaAPP.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<h3>Avión</h3>
<p>Lista de aviones</p>


@if (listAviones == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" id="btn-crear" @onclick="(() => ObtenerAvion (0))">
        <span class="icon fa-solid fa-plus-square"></span>Crear Avión
    </button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Descripción</th>
                <th>TipoAvion</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!listAviones.Any())
            {
                <p><em>No existen Registros</em></p>
            }
            else
            {
                @foreach (var tipoAvion in listAviones)
                {
                    <tr>
                        <td>@tipoAvion.Descripcion</td>
                        <td>@tipoAvion.DescripcionTipoAvion</td>
                        <td>
                            <button class="btn btn-outline-secondary" @onclick="(() => ObtenerAvion (tipoAvion.IdAvion ))">
                                <span class="icon fa-solid fa-pencil" title="pencil" aria-hidden="true"></span>
                                Editar
                            </button>
                            <button class="btn btn-outline-danger" role="button" @onclick="(() => Delete_Click(tipoAvion))">
                                <span class="icon fa-solid fa-trash" title="trash" aria-hidden="true"></span>
                                Eliminar
                            </button>
                        </td>
                    </tr>
                }
            }

        </tbody>
    </table>
}
@code {

    private List<Avion> listAviones = new List<Avion>();

    protected override async Task OnInitializedAsync()
    {
        await LlenarTabla();

    }

    private async Task LlenarTabla()
    {
        try
        {
            listAviones = await Http.GetFromJsonAsync<List<Avion>>("Avion");
        }
        catch (Exception ex)
        {
            listAviones = new List<Avion>();

        }
    }


    private void ObtenerAvion(int idAvion)
    {
        if (idAvion == 0)
        {
            navigationManager.NavigateTo($"editAvion/");
        }
        else
        {
            navigationManager.NavigateTo($"editAvion/{idAvion }");
        }


    }

    protected async void Delete_Click(Avion tipoAvion)
    {
        try
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"¿Esta seguro que desea eliminar el tipoAvion '{tipoAvion.Descripcion}'?"))
                return;

            var respon = await Http.DeleteAsync($"Avion/{tipoAvion.IdAvion }");

            if (respon.IsSuccessStatusCode)
            {
                await LlenarTabla();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

            throw;
        }


    }

}
