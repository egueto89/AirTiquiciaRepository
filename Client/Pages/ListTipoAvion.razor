@page "/tipoAviones"
@using AirTiquiciaAPP.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<h3>Tipo Avion</h3>
<p>Lista de tipo de aviones</p>


@if (listTipoAviones == null)
{
    <p><em>Loading...</em></p>
}
else if (!listTipoAviones.Any())
{
    <p><em>No existen Registros</em></p>
}
else
{
    <button class="btn btn-primary" id="btn-crear" @onclick="(() => ObtenerTipoAvion (0))">
        <span class="icon fa-solid fa-plus-square"></span>Crear Tipo Avion
    </button>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Descripción</th>
                <th>Fila</th>
                <th>Asiento</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tipoAvion in listTipoAviones)
            {
                <tr>
                    <td>@tipoAvion.Descripcion</td>
                    <td>@tipoAvion.Fila</td>
                    <td>@tipoAvion.Asiento</td>
                    <td>
                        <button class="btn btn-outline-secondary" @onclick="(() => ObtenerTipoAvion (tipoAvion.IdTipoAvion ))">
                            <span class="icon fa-solid fa-pencil" title="pencil" aria-hidden="true"></span>
                            Editar
                        </button>
                        <button class="btn btn-outline-danger" role="button" @onclick="(() => Delete_Click(tipoAvion))">
                            <span class="icon fa-solid fa-trash" title="trash" aria-hidden="true"></span>
                            Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {

    private List<TipoAvion> listTipoAviones = new List<TipoAvion>();

    protected override async Task OnInitializedAsync()
    {
        await LlenarTabla();

    }

    private async Task LlenarTabla()
    {
        try
        {
            listTipoAviones = await Http.GetFromJsonAsync<List<TipoAvion>>("TipoAvion");
        }
        catch (Exception ex)
        {
            listTipoAviones = new List<TipoAvion>();

        }
    }


    private void ObtenerTipoAvion(int idTipoAvion)
    {
        if (idTipoAvion == 0)
        {
            navigationManager.NavigateTo($"editTipoAvion/");
        }
        else
        {
            navigationManager.NavigateTo($"editTipoAvion/{idTipoAvion }");
        }


    }

    protected async void Delete_Click(TipoAvion tipoAvion)
    {
        try
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"¿Esta seguro que desea eliminar el tipoAvion '{tipoAvion.Descripcion}'?"))
                return;

            var respon = await Http.DeleteAsync($"TipoAvion/{tipoAvion.IdTipoAvion }");

            if (respon.IsSuccessStatusCode)
            {
                await LlenarTabla();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

            throw;
        }


    }

}
