@page "/tipoVuelos"
@using AirTiquiciaAPP.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime



    <AuthorizeView>
        <Authorized>
            <h1>TipoVuelo</h1>

            <p>Lista de tipo de vuelos</p>

            @if (listTipoVuelo == null)
            {
                <p><em>Loading...</em></p>
            }
            else 
            {
                <button class="btn btn-primary" id="btn-crear" @onclick="(()=>ObtenerTipoVuelo(0))">
                    <span class="icon fa-solid fa-plus-square"></span>
                    Crear Tipo Vuelo
                </button>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>TipoVuelo</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!listTipoVuelo.Any())
                        {
                            <p><em>No existen Registros</em></p>
                        }
                        else
                        {
                            @foreach (var tipovuelo in listTipoVuelo)
                            {
                                <tr>
                                    <td>@tipovuelo.Descripcion</td>
                                    <td>
                                        <button class="btn btn-outline-secondary" @onclick="(()=>ObtenerTipoVuelo(tipovuelo.IdTipoVuelo))">
                                            <span class="icon fa-solid fa-pencil" title="pencil" aria-hidden="true"></span>
                                            Editar
                                        </button>
                                        <button class="btn btn-outline-danger" tipovueloe="button" @onclick="(()=>Delete_Click(tipovuelo))">
                                            <span class="icon fa-solid fa-trash" title="trash" aria-hidden="true"></span>
                                            Eliminar
                                        </button>
                                    </td>
                                </tr>
                            }
                        }

                    </tbody>
                </table>
            }
        </Authorized>
        <NotAuthorized>
            <div class="alert alert-warning col-12" role="alert">
                No Autorizado por favor inicie sesión
            </div>
        </NotAuthorized>
    </AuthorizeView>

  

    @code {
        private List<TipoVuelo> listTipoVuelo = new List<TipoVuelo>();

        protected override async Task OnInitializedAsync()
        {

            await LlenarTabla();
        }

        private async Task LlenarTabla()
        {
            try
            {
                listTipoVuelo = await Http.GetFromJsonAsync<List<TipoVuelo>>("TipoVuelo");
            }
            catch (Exception ex)
            {
                listTipoVuelo = new List<TipoVuelo>();

            }
        }


        private void ObtenerTipoVuelo(int idTipoVuelo)
        {
            if (idTipoVuelo == 0)
            {
                navigationManager.NavigateTo($"editTipoVuelo/");
            }
            else
            {
                navigationManager.NavigateTo($"editTipoVuelo/{idTipoVuelo}");
            }


        }

        protected async void Delete_Click(TipoVuelo tipovuelo)
        {
            try
            {
                if (!await JSRuntime.InvokeAsync<bool>("confirm", $"¿Esta seguro que desea eliminar el tipovuelo '{tipovuelo.Descripcion}'?"))
                    return;

                var respon = await Http.DeleteAsync($"TipoVuelo/{tipovuelo.IdTipoVuelo}");

                if (respon.IsSuccessStatusCode)
                {
                    await LlenarTabla();
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {

                throw;
            }


        }




    }
