@page "/usuarios"
@using AirTiquiciaAPP.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<h3>Usuario</h3>
<p>Lista de usuarios</p>


@if (listUsuarios == null)
{
    <p><em>Loading...</em></p>
 }
 else if(!listUsuarios.Any())
{
<p><em>No existen Registros</em></p>
}
else
{
<button class="btn btn-primary" id="btn-crear" @onclick="(() => ObtenerUsuario(0))">
    <span class="icon fa-solid fa-plus-square"></span>
    Crear Usuario
</button>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Usuario</th>
            <th>Rol</th>
            <th>Persona</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var usuario in listUsuarios)
        {
            <tr>
                <td>@usuario.UsuarioSistema</td>
                <td>@usuario.DescripcionRol</td>
                <td>@usuario.NombrePersona</td>

                <td>
                    <button class="btn btn-outline-secondary" @onclick="(() => ObtenerUsuario(usuario.IdUsuario))">
                        <span class="icon fa-solid fa-pencil" title="pencil" aria-hidden="true"></span>
                        Editar
                    </button>
                    <button class="btn btn-outline-danger" role="button" @onclick="(() => Delete_Click(usuario))">
                        <span class="icon fa-solid fa-trash" title="trash" aria-hidden="true"></span>
                        Eliminar
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
}
@code {

    private List<Usuario> listUsuarios = new List<Usuario>();

    protected override async Task OnInitializedAsync()
    {

        await LlenarTabla();


    }
    private async Task LlenarTabla()
    {
        try
        {
            listUsuarios = await Http.GetFromJsonAsync<List<Usuario>>("Usuario");
        }
        catch (Exception ex)
        {
            listUsuarios = new List<Usuario>();


        }
    }


    private void ObtenerUsuario(int idUsuario)
    {
        if (idUsuario == 0)
        {
            navigationManager.NavigateTo($"editUsuario/");
        }
        else
        {
            navigationManager.NavigateTo($"editUsuario/{idUsuario}");
        }


    }

    protected async void Delete_Click(Usuario usuario)
    {
        try
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"¿Esta seguro que desea eliminar el tripulante '{usuario.UsuarioSistema}'?"))
                return;

            var respon = await Http.DeleteAsync($"Usuario/{usuario.IdUsuario}");

            if (respon.IsSuccessStatusCode)
            {
                await LlenarTabla();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

            throw;
        }


    }

}
