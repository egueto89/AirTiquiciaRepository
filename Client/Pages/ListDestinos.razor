@page "/destinos"
@using AirTiquiciaAPP.Shared
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized>

        <h1>Destinos</h1>

        <p>Lista de destinos ofrecidos por AirTiquicia</p>

        @if (destinos == null)
        {
            <p><em>Loading...</em></p>
        }
        else 
        {
            <button class="btn btn-primary" id="btn-crear" @onclick="(()=>ObtenerDestino(0))">
                <span class="icon fa-solid fa-plus-square"></span>
                Crear Destino
            </button>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Destino</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @if (!destinos.Any())
                    {
                        <p><em>No existen Registros</em></p>
                    }
                    else
                    {
                        @foreach (var destino in destinos)
                        {
                            <tr>
                                <td>@destino.Nombre</td>
                                <td>
                                    <button class="btn btn-outline-secondary" @onclick="(()=>ObtenerDestino(destino.IdDestino))">
                                        <span class="icon fa-solid fa-pencil" title="pencil" aria-hidden="true"></span>
                                        Editar
                                    </button>
                                    <button class="btn btn-outline-danger" role="button" @onclick="(()=>Delete_Click(destino))">
                                        <span class="icon fa-solid fa-trash" title="trash" aria-hidden="true"></span>
                                        Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning col-12" role="alert">
            No Autorizado por favor inicie sesión
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    private List<Destino> destinos = new List<Destino>();

    protected override async Task OnInitializedAsync()
    {
        await LlenarTabla();
    }

    private void ObtenerDestino(int idDestino)
    {
        if (idDestino == 0)
        {
            navigationManager.NavigateTo($"editDestino/");
        }
        else
        {
            navigationManager.NavigateTo($"editDestino/{idDestino}");
        }


    }
    private async Task LlenarTabla()
    {
        try
        {
            destinos = await Http.GetFromJsonAsync<List<Destino>>("Destino");
        }
        catch (Exception ex)
        {

            destinos = new List<Destino>();
        }

    }

    protected async void Delete_Click(Destino destino)
    {
        try
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"¿Esta seguro que desea eliminar el destino '{destino.Nombre}'?"))
                return;

            var respon = await Http.DeleteAsync($"Destino/{destino.IdDestino}");

            if (respon.IsSuccessStatusCode)
            {
                await LlenarTabla();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {

            throw;
        }


    }






}
